<!DOCTYPE html>
<html lang="<%= res.getLocale() %>">
    <head>
        <title>Game Bot | <%= res.__("dashboard.connect4.title") %></title>
        
        <meta name="theme-color" content="<%= req.color %>">

        <%- include("../utils/header") %>
    </head>
    <body class="bgMainTheme animationTheme">
        <div class="flex flex-col flex-no-wrap content-center h-full">
            <%- include("../utils/navbar") %> 

            <%- include("../utils/notif") %>

            <p class="text-center dark:text-white"><%= res.__("dashboard.connect4.gameOf") %> <%= game.createdBy %> | <%= res.__("dashboard.connect4.playerNumber") %> <span id="playerNumber"></span>/2</p>
            <p class="text-center dark:text-white result-turn"><%= res.__("dashboard.connect4.waitPlayer") %></p>
            
            <div class="flex h-screen flex-grow">
                <div class="m-auto text-center">
                    <div class="content-grid flex flex-col">
                        <!-- <button class="rounded-full w-7 h-7"></button> -->
                    </div>
                    <button class="bg-blue text-white hover:text-black rounded-xl mx-auto w-36 h-10 hidden rematch"><%= res.__("dashboard.connect4.rematch") %></button>
                </div>
            </div>
        </div>
        <script src="/socket.io/socket.io.js"></script>
        <script>
            // Get the gameId from the url
            const gameId = window.location.pathname.split("/")[2]
            const socket = io()

            socket.on("connect", () => {
                socket.emit("join", { 
                    gameId,
                    username: "<%= req.session.username %>"
                })
            })

            socket.on("error", (data) => {
                document.querySelector(".all-notif")
                    .insertAdjacentHTML("beforeend", `
                        <div class="notif notif-0 text-center ml-auto animate-rightToLeft">
                            <div class="p-2 bg-red items-center text-white leading-none flex lg:inline-flex">
                                <span class="flex rounded-full uppercase px-2 py-1 text-xs font-bold mr-3">
                                    <i class="fas fa-exclamation-triangle"></i>
                                </span>
                                <span class="font-semibold mr-2 text-left flex-auto">
                                    ${data.errorType === "notTurn" && data.finish ? data.texts["gameOver"] : data.message}
                                </span>
                            </div>
                        </div>
                    `)

                refreshNotif()
            })

            socket.on("joined", (data) => {
                // Add a notification
                document.querySelector(".all-notif")
                    .insertAdjacentHTML("beforeend", `
                        <div class="notif notif-0 text-center ml-auto animate-rightToLeft">
                            <div class="p-2 bg-green items-center text-white leading-none flex lg:inline-flex">
                                <span class="flex rounded-full uppercase px-2 py-1 text-xs font-bold mr-3">
                                    <i class="fas fa-check"></i>
                                </span>
                                <span class="font-semibold mr-2 text-left flex-auto">
                                    ${socket.id === data.id ? data.texts["youJoin"] : `${data.player.username} ${data.texts["asJoin"]}`}
                                </span>
                            </div>
                        </div>
                    `)
                
                refreshNotif()

                // Update the player number
                document.querySelector("#playerNumber").textContent = `${data.playerNumber}`

                // Update player turn
                if (data.canStart) document.querySelector(".result-turn").textContent = data.isTurnId === socket.id ? data.texts["yourTurn"] : data.texts["otherTurn"]

                refreshBoard(data.board)
            })

            // Revieve when rematch is requested
            socket.on("rematch", (data) => {
                if (data.type === "started") {
                    // Add a notification
                    document.querySelector(".all-notif")
                        .insertAdjacentHTML("beforeend", `
                            <div class="notif notif-0 text-center ml-auto animate-rightToLeft">
                                <div class="p-2 bg-green items-center text-white leading-none flex lg:inline-flex">
                                    <span class="flex rounded-full uppercase px-2 py-1 text-xs font-bold mr-3">
                                        <i class="fas fa-check"></i>
                                    </span>
                                    <span class="font-semibold mr-2 text-left flex-auto">
                                        ${data.texts["gameRestart"]}
                                    </span>
                                </div>
                            </div>
                        `)
                    
                    return refreshNotif()
                }

                // Add a notification
                document.querySelector(".all-notif")
                    .insertAdjacentHTML("beforeend", `
                        <div class="notif notif-0 text-center ml-auto animate-rightToLeft">
                            <div class="p-2 bg-green items-center text-white leading-none flex lg:inline-flex">
                                <span class="flex rounded-full uppercase px-2 py-1 text-xs font-bold mr-3">
                                    <i class="fas fa-check"></i>
                                </span>
                                <span class="font-semibold mr-2 text-left flex-auto">
                                    ${socket.id === data.player.id ? data.texts["youAskRematch"] : `${data.player.username} ${data.texts["otherAskRematch"]}`}
                                </span>
                            </div>
                        </div>
                    `)
                
                refreshNotif()
            })

            const rematchButton = document.querySelector(".rematch")

            rematchButton.addEventListener("click", () => {
                socket.emit("rematch", {
                    gameId
                })
            })

            // Recieve when play
            socket.on("play", (data) => {
                refreshBoard(data.board)
                
                if (data.finish) {
                    rematchButton.classList.remove("hidden")
                } else rematchButton.classList.add("hidden")

                if (data.win !== undefined && data.win) {
                    document.querySelector(".result-turn").textContent = data.winnerId === socket.id ? data.texts["youWin"] : data.texts["youLoose"]
                
                    return
                }

                if (data.allFill !== undefined && data.allFill) {
                    document.querySelector(".all-notif")
                        .insertAdjacentHTML("beforeend", `
                            <div class="notif notif-0 text-center ml-auto animate-rightToLeft">
                                <div class="p-2 bg-green items-center text-white leading-none flex lg:inline-flex">
                                    <span class="flex rounded-full uppercase px-2 py-1 text-xs font-bold mr-3">
                                        <i class="fas fa-check"></i>
                                    </span>
                                    <span class="font-semibold mr-2 text-left flex-auto">
                                        ${data.texts["gameOver"]}
                                    </span>
                                </div>
                            </div>
                        `)

                    return
                }

                // Update the player turn
                document.querySelector(".result-turn").textContent = data.isTurn === socket.id ? data.texts["yourTurn"] : data.texts["otherTurn"]
            })

            async function refreshNotif() {
                document.querySelectorAll(".notif").forEach(async(div, index) => {
                    await sleep(5000 + index * 400)
                    div.classList.add("animate-leftToRight")
                    await sleep(2000)
                    div.remove()
                })
            }

            function refreshBoard(board) {
                // Remove all the content
                document.querySelector(".content-grid").textContent = ""

                // Add all board to .content-grid
                for (let i = 0; i < board.length; i++) {
                    // Create a div
                    const mainDiv = document.createElement(`div`)

                    mainDiv.classList.add(`${i}`)

                    // Add the div to .content-grid
                    document.querySelector(".content-grid").appendChild(mainDiv)

                    for (let j = 0; j < board[i].length; j++) {                        
                        // Create a div
                        const div = document.createElement("div")

                        div.classList.add(`${i}-${j}`)

                        const button = document.createElement("button")
                        const bgColor = 
                            board[i][j] === "âšª" ? ["dark:bg-white", "bg-white-secondary"] : 
                            board[i][j] === "ðŸ”´" ? ["bg-red"] : 
                            board[i][j] === "ðŸŸ¡" ? ["bg-yellow"] :
                            board[i][j] === "ðŸ”´_win" ? ["bg-red", "animate-pulse"] :
                            board[i][j] === "ðŸŸ¡_win" ? ["bg-yellow", "animate-pulse"] : ["bg-white"]

                        button.id = `${i}-${j}`
                        button.classList.add("play", "rounded-full", "w-7", "h-7", ...bgColor)

                        mainDiv.appendChild(button)
                    }
                }

                document.querySelectorAll(".play").forEach(button => {
                    button.addEventListener("click", () => {
                        const [row, column] = button.id.split("-")
                        
                        socket.emit("play", {
                            column,
                            gameId
                        })
                    })
                })
            }

            function sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms))
            }
        </script>
    </body>
</html>